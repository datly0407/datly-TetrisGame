/**
 * TCSS 305 - Autumn 2016
 * Assignment 6a - tetris
 */

package view;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

import model.MovableTetrisPiece;

/**
 * Class represent the next piece preview.
 * @author Dat Ly datly@uw.edu
 * @version 12/02/2016
 *
 */
public class TetrisNextPiece extends JPanel implements Observer, PropertyChangeListener {    
    /** Default color for this panel. */
    private static final Color DEFAULT_COLOR = Color.BLACK;
    /** Scale needed when drawing piece. (x-coordinate) */
    private static final int BOUNDING_X = 55;
    /** Scale needed when drawing piece. (y-coordinate) */
    private static final int BOUNDING_Y = 40;
    /** Scale needed to center piece. (O and I piece) */
    private static final int SPECIAL_BOUDING = 15;
    /** Reference to the MovaleTetrisPiece class. */
    private MovableTetrisPiece myNextPiece;
    
    private JPanel myInnerPanel;
    
    private JPanel myBottomPanel;
    /**
     * Width of the Panel.
     */
    private Dimension myDimension; 
    
    private Dimension mySmallerDimension;
    
    private TopPanel myTopPanel;
    
    /**
     * Constructor initialized instance fields.
     */
    public TetrisNextPiece() {
        
        super();
        myDimension = new Dimension(TetrisGUI.DEFAULT_WIDTH - TetrisGUI.MEDIUM_WIDTH, 
                                TetrisGUI.MEDIUM_HEIGHT);
        
        myInnerPanel = new JPanel();
        myBottomPanel = new JPanel();
        mySmallerDimension = new Dimension((int)myDimension.getWidth(), 
                                           (int)myDimension.getHeight() / 3);
        setUpPanel();
    }
    
    /**
     * Command method that will do the set up components of this panel.
     */
    private void setUpPanel() {
                
        setBackground(DEFAULT_COLOR);
        setPreferredSize(myDimension);
        setUpInfoPanel();
        
        myTopPanel = new TopPanel();
        final BorderLayout box = new BorderLayout();

        myBottomPanel.setPreferredSize(mySmallerDimension);
        myBottomPanel.setBackground(DEFAULT_COLOR);
        
        setLayout(box);
        add(myTopPanel, BorderLayout.NORTH);
        add(myInnerPanel, BorderLayout.CENTER);
        add(myBottomPanel, BorderLayout.SOUTH);
        // Later can create score panel.             
    }
    
    private void setUpInfoPanel() {
        
        final List<JLabel> label = new ArrayList<JLabel>();
        label.add(new JLabel("Move Piece Left: A "));
        label.add(new JLabel("Move Piece Right: D "));
        label.add(new JLabel("Move Piece Down: S "));
        label.add(new JLabel("Rotate Piece: R "));
        label.add(new JLabel("Drop Piece Down: Space "));
            
        final TitledBorder infoBorder = new TitledBorder("Controls Key:");
        infoBorder.setTitleColor(Color.WHITE);
        infoBorder.setTitleJustification(TitledBorder.CENTER);
        infoBorder.setBorder(BorderFactory.createLineBorder(Color.WHITE));
        
        myInnerPanel.setBorder(infoBorder);
        myInnerPanel.setBackground(DEFAULT_COLOR);
        myInnerPanel.setPreferredSize(mySmallerDimension);
        myInnerPanel.setLayout(new BoxLayout(myInnerPanel, BoxLayout.Y_AXIS));
        myInnerPanel.add(Box.createVerticalStrut(10));
        for (final JLabel lb : label) { 
            lb.setForeground(Color.WHITE); 
            lb.setAlignmentX(Component.CENTER_ALIGNMENT);
           
            myInnerPanel.add(lb);
        }
    }
    
    public Dimension getDimension() {
        
        return (Dimension) myDimension.clone();
    }
     
    private class TopPanel extends JPanel {
        
        public TopPanel() {
            
            
            setUpPreviewPanel();  
        }
        
        private void setUpPreviewPanel() {
            
            setPreferredSize(mySmallerDimension);
            setBackground(DEFAULT_COLOR);
            
            final TitledBorder previewBorder = new TitledBorder("Next Piece: ");
            previewBorder.setTitleColor(Color.WHITE);
            previewBorder.setBorder(BorderFactory.createLineBorder(Color.WHITE));
            previewBorder.setTitleJustification(TitledBorder.CENTER);
           
            setBorder(previewBorder);
        }
        @Override
        public void paintComponent(final Graphics theGraphics) {
        
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                             RenderingHints.VALUE_ANTIALIAS_ON);
      
        final int scale = (((int) myDimension.getWidth() / 10 )*8) / 7;
        if (myNextPiece != null) {
            drawNextPiece(g2d, scale);
        }
    }
    
    /**
     * Display preview for next coming piece.
     * @param theGraphics use Graphics2D to do the drawing.
     * @param theScale scale appropriate to display each piece.
     */
    private void drawNextPiece(final Graphics2D theGraphics, final int theScale) {
        
        final Graphics2D g2d = theGraphics;
        g2d.setStroke(new BasicStroke(1));
        final String[] lines = myNextPiece.toString().split("\n");
        for (int i = 0; i < lines.length; i++) {  
            for (int j = 0; j < lines[i].length(); j++) { 
                final int topLeftX = (j * theScale) + theScale*3;
                final int topLeftY = (i * theScale) + theScale;
                final Rectangle2D.Double piecePreview = 
                                new Rectangle2D.Double(topLeftX, topLeftY, theScale, theScale);
                switch (lines[i].charAt(j)) {
                    case 'I':
                        g2d.setPaint(Color.CYAN.darker().darker());
                        g2d.fill(new Rectangle2D.Double(
                                 topLeftX - SPECIAL_BOUDING, topLeftY, theScale, theScale));
                        break;
                    case 'J':
                        g2d.setPaint(Color.WHITE.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                    case 'L':
                        g2d.setPaint(Color.ORANGE.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                    case 'O':
                        g2d.setPaint(Color.YELLOW.darker().darker());
                        g2d.fill(new Rectangle2D.Double(
                                 topLeftX - SPECIAL_BOUDING, topLeftY, theScale, theScale));
                        break;
                    case 'S':
                        g2d.setPaint(Color.GREEN.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                    case 'T':
                        g2d.setPaint(Color.MAGENTA.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                    case 'Z':
                        g2d.setPaint(Color.RED.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                        
                    default:
                }
            }
        }         
        }
    }
  
    @Override 
    public void update(final Observable theObservable, final Object theData) {
        
        if (theData instanceof MovableTetrisPiece) {
            myNextPiece = (MovableTetrisPiece) theData;
        }  
        repaint();
    }

    @Override
    public void propertyChange(PropertyChangeEvent theEvent) {
        
        if("PreviewBoard".equals(theEvent.getPropertyName())) {
            myDimension = (Dimension) theEvent.getNewValue();
            mySmallerDimension = new Dimension((int)myDimension.getWidth(), 
                                               (int)myDimension.getHeight() / 3);
            setPreferredSize(myDimension);
            myInnerPanel.setPreferredSize(mySmallerDimension);
            myBottomPanel.setPreferredSize(mySmallerDimension);
            myTopPanel.setPreferredSize(mySmallerDimension);
        }
    }
       
}