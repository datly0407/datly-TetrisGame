/**
 * TCSS 305 - Autumn 2016
 * Assignment 6a - tetris
 */

package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;

import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;

import model.MovableTetrisPiece;

/**
 * Class represent the next piece preview.
 * @author Dat Ly datly@uw.edu
 * @version 12/02/2016
 *
 */
public class TetrisNextPiece extends JPanel implements Observer {
    /** Size of this panel. */
    private static final Dimension SIZE_OF_PANEL = new Dimension(200, 200);
    /** Default color for this panel. */
    private static final Color DEFAULT_COLOR = Color.BLACK;
    /** Scale needed when drawing piece. (x-coordinate) */
    private static final int BOUNDING_X = 55;
    /** Scale needed when drawing piece. (y-coordinate) */
    private static final int BOUNDING_Y = 40;
    /** Scale needed to center piece. (O and I piece) */
    private static final int SPECIAL_BOUDING = 15;
    /** Reference to the MovaleTetrisPiece class. */
    private MovableTetrisPiece myNextPiece;
    
    /**
     * Constructor initialized instance fields.
     */
    public TetrisNextPiece() {
        
        super();
        setUpPanel();
    }
    
    /**
     * Command method that will do the set up components of this panel.
     */
    private void setUpPanel() {
                
        setBackground(DEFAULT_COLOR);
        setPreferredSize(SIZE_OF_PANEL);
        final BoxLayout box = new BoxLayout(this, BoxLayout.PAGE_AXIS);
        
        final JPanel innerPanel = new JPanel();
        final JLabel label = new JLabel("<html><br><br><br>Move Piece Left: A <br>"
                        + "Move Piece Right: D <br>"
                        + "Move Piece Down: S <br>"
                        + "Rotate Piece: R </html>");
        
        label.setForeground(Color.WHITE);
        innerPanel.setPreferredSize(new Dimension(10, 10));
        innerPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE));
        innerPanel.setBackground(Color.BLACK);
        innerPanel.add(label);
        
        add(Box.createHorizontalStrut(10));
        add(innerPanel);
        add(Box.createHorizontalStrut(10));
        // Later can create score panel 
        setLayout(box);
        
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                             RenderingHints.VALUE_ANTIALIAS_ON);
        // (10, 40) -> (190, 160)
        final Rectangle2D.Double previewPiece = new Rectangle2D.Double(10, 40, 180, 120);
        final int scale = 30;
        g2d.setPaint(Color.WHITE);
        g2d.draw(previewPiece);
        if (myNextPiece != null) {
            drawNextPiece(g2d, scale);
        }
    }
    
    /**
     * Display preview for next coming piece.
     * @param theGraphics use Graphics2D to do the drawing.
     * @param theScale scale appropriate to display each piece.
     */
    private void drawNextPiece(final Graphics2D theGraphics, final int theScale) {
        
        final Graphics2D g2d = theGraphics;
        g2d.setStroke(new BasicStroke(1));
        final String[] lines = myNextPiece.toString().split("\n");
        for (int i = 0; i < lines.length; i++) {  
            for (int j = 0; j < lines[i].length(); j++) { 
                final int topLeftX = (j * theScale) + BOUNDING_X;
                final int topLeftY = (i * theScale) + BOUNDING_Y;
                final Rectangle2D.Double piecePreview = 
                                new Rectangle2D.Double(topLeftX, topLeftY, theScale, theScale);
                switch (lines[i].charAt(j)) {
                    case 'I':
                        g2d.setPaint(Color.CYAN.darker().darker());
                        g2d.fill(new Rectangle2D.Double(
                                 topLeftX - SPECIAL_BOUDING, topLeftY, theScale, theScale));
                        break;
                    case 'J':
                        g2d.setPaint(Color.WHITE.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                    case 'L':
                        g2d.setPaint(Color.ORANGE.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                    case 'O':
                        g2d.setPaint(Color.YELLOW.darker().darker());
                        g2d.fill(new Rectangle2D.Double(
                                 topLeftX - SPECIAL_BOUDING, topLeftY, theScale, theScale));
                        break;
                    case 'S':
                        g2d.setPaint(Color.GREEN.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                    case 'T':
                        g2d.setPaint(Color.MAGENTA.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                    case 'Z':
                        g2d.setPaint(Color.RED.darker().darker());
                        g2d.fill(piecePreview);
                        break;
                        
                    default:
                }
            }
        }         
    }
    
    @Override 
    public void update(final Observable theObservable, final Object theData) {
        
        if (theData instanceof MovableTetrisPiece) {
            myNextPiece = (MovableTetrisPiece) theData;
        }  
        repaint();
    }

}
