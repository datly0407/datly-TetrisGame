/**
 * TCSS 305 - Autumn 2016
 * Assignment 6a - tetris
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.Rectangle2D;

import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.Timer;

import listener.KeyListener;
import model.Board;

/**
 * Class represent the board of tetris game.
 * @author Dat Ly datly@uw.edu
 * @version 12/02/2016
 *
 */
public class TetrisBoard extends JPanel implements ActionListener, Observer{
    private static final int INITIAL_WIDTH = 305;
    
    private static final int INITIAL_HEIGHT = 605;
    /** Default color of the Board. */
    private static final Color DEFAULT_COLOR = Color.BLACK;
    /** Scale needed when drawing piece. (x-coordinate) */
    private static final int X_OFFSET = 1;
    /** Scale needed when drawing piece. (y-coordinate) */  
    private static final int Y_OFFSET = 5;
    /** Extra scale needed when drawing piece. */
    private static final int ROUNDING = 1;
    /** Timer constant (milisecond). */
    private static final int DELAY = 800;
    /** Each line of the Board as String representation. */
    private String[] myLines;
    /** KeyListener to move pieces. */
    private final KeyListener myKeyListener;
    /** Reference to the Board. */ 
    private final Board myBoard; 
    /** Timer use for animation of Tetris game. */   
    private final Timer myTimer;
    /** Check whether the game is over. */
    private boolean myGameOverFlag;
    
    private int myWidth; 
    
    private int myHeight;
    
    /**
     * Constructor initialized instance fields.
     * @param theBoard represent Board class.
     */
    public TetrisBoard(final Board theBoard) {
        
        super();
        myBoard = theBoard;
        myTimer = new Timer(DELAY, this);
        myKeyListener = new KeyListener(myBoard);
        myGameOverFlag = false;
        myWidth = INITIAL_WIDTH;
        myHeight = INITIAL_HEIGHT;
                        
        setUpBoard();
    }
    
    /**
     * Command method do the set up for the Game Board.
     */
    private void setUpBoard() {
        
        myTimer.start();
        
        setSize(myWidth, myHeight);
        setFocusable(true);
        addKeyListener(myKeyListener);     
        setBackground(DEFAULT_COLOR);
    }
    
    public void setWidth(final int theWidth) {
        
        myWidth = theWidth;
    }   
    
    public void setHeight(final int theHeight) {
        
        myHeight = theHeight;
    }
    /**
     * Command method use to draw the grid of the Game Board.
     * @param theGraphics using Graphics2D to draw.
     * @param theScale scale of the Board.
     */
    private void paintGrid(final Graphics2D theGraphics, final int theScale) {
        
        final Graphics2D g2d = theGraphics;
        g2d.setStroke(new BasicStroke(1));
        g2d.setPaint(Color.GRAY);
        // y - coordinate
        for (int i = 0; i < myBoard.getHeight(); i++) {
            // x - coordinate
            for (int j = 0; j < myBoard.getWidth(); j++) {
                g2d.drawRect(j * theScale, i * theScale, theScale, theScale);
            }
        }            
    }
    
    
    /**
     * Command method use to draw pieces inside the Game Board.
     * @param theGraphics using Graphics2D to do drawing.
     * @param theScale scale of each piece.
     */
    private void paintPiece(final Graphics2D theGraphics, final int theScale) {
        
        final Graphics2D g2d = theGraphics;
        g2d.setStroke(new BasicStroke(1)); 
        for (int i = 0; i < myLines.length; i++) {
            for (int j = 0; j < myLines[i].length(); j++) {
                final int topLeftX = ((j - X_OFFSET) * theScale) + ROUNDING;
                final int topLeftY = ((i - Y_OFFSET) * theScale) + ROUNDING;
                final Rectangle2D.Double piece = new Rectangle2D.Double(topLeftX, topLeftY, 
                                                     theScale - ROUNDING, theScale - ROUNDING);
                switch (myLines[i].charAt(j)) {
                    case 'I':
                        g2d.setPaint(Color.CYAN.darker().darker());
                        g2d.fill(piece);
                        break;
                    case 'J':
                        g2d.setPaint(Color.WHITE.darker().darker());
                        g2d.fill(piece);
                        break;
                    case 'L':
                        g2d.setPaint(Color.ORANGE.darker().darker());
                        g2d.fill(piece);
                        break;
                    case 'O':
                        g2d.setPaint(Color.YELLOW.darker().darker());
                        g2d.fill(piece);
                        break;
                    case 'S':
                        g2d.setPaint(Color.GREEN.darker().darker());
                        g2d.fill(piece);
                        break;
                    case 'T':
                        g2d.setPaint(Color.MAGENTA.darker().darker());
                        g2d.fill(piece);
                        break;
                    case 'Z':
                        g2d.setPaint(Color.RED.darker().darker());
                        g2d.fill(piece);
                        break;
                        
                    default:
                }
            }
        }
    }  
    
    /**
     * Command method will display text when piece reach the top.
     * (Game is over)
     * @param theGraphics use Graphics2D to do the drawing.
     */
    private void paintGameOver(final Graphics2D theGraphics) {
        
        // Should find another formula to calculate the string again.
        final Graphics2D g2d = theGraphics;
        final String gameOver = "GAME - OVER";
        final Font font = new Font(Font.SERIF, Font.BOLD + Font.ITALIC, 40);
        g2d.setFont(font);
        final FontRenderContext renderContext = g2d.getFontRenderContext();
        final GlyphVector glyphVector = font.createGlyphVector(renderContext, gameOver);
        final Rectangle2D visualBounds = glyphVector.getVisualBounds().getBounds();

        final int x =
            (int) ((getWidth() - visualBounds.getWidth()) / 2 - visualBounds.getX());
        final int y =
            (int) ((getHeight() - visualBounds.getHeight()) / 2 - visualBounds.getY());

        // display the text visually centered in the JPanel
        g2d.drawString(gameOver, x, y);
        myTimer.stop();
    }
    
    @Override
    public void paintComponent(final Graphics theGraphics) {
        
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                             RenderingHints.VALUE_ANTIALIAS_ON);
        final int scale = myWidth / myBoard.getWidth(); // 300 / 10 = 30
        // Can be add as one features 
        paintGrid(g2d, scale);
        paintPiece(g2d, scale);  
        if (myGameOverFlag) {
            paintGameOver(g2d);
        }
    }
    
    @Override 
    public void update(final Observable theObserver, final Object theData) {
        
        if (theData instanceof String) {
            myLines = myBoard.toString().split("\n"); 
            repaint();
        }
        
        if (theData instanceof Boolean) {
            myGameOverFlag = (Boolean) theData;
        }      
    }
    
    @Override
    public void actionPerformed(final ActionEvent theEvent) {     
        myBoard.down();
    }
    
}