/**
 * TCSS 305 - Autumn 2016
 * Assignment 6a - tetris
 */

package view;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;

import java.util.ArrayList;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.JFrame;

import model.Board;

/**
 * Class represent the JFrame which is contain all 
 * components of the program.
 * @author Dat Ly datly@uw.edu
 * @version 12/02/2016
 *
 */
public class TetrisGUI extends JFrame {
    /** Initial size of the JFrame. */
    public static final int DEFAULT_WIDTH = 610;
    /** Initial size of the JFrame. */
    public static final int DEFAULT_HEIGHT = 655;
    /** Small size for Game Board. (Width) */
    public static final int SMALL_WIDTH = 205;
    /** Small size for Game Board. (Height) */
    public static final int SMALL_HEIGHT = 405;
    /** Medium size for Game Board. (Width) */
    public static final int MEDIUM_WIDTH = 305;
    /** Medium size for Game Board. (Height) */
    public static final int MEDIUM_HEIGHT = 605;
    /** Large size for Game Board. (Width) */
    public static final int LARGE_WIDTH = 355;
    /** Large size for Game Board. (Height) */
    public static final int LARGE_HEIGHT = 705;
    /**
     * Reference Tetris Board class.
     */
    private final TetrisBoard myBoardDisplay;
    /**
     * Reference next piece preview class.
     */
    private final TetrisNextPiece myNextPieceDisplay;
    /**
     * Reference to the menu bar class.
     */
    private final TetrisMenuBar myMenuBar;
    /**
     * Reference to Board class.
     */
    private final Board myBoard;
    /** 
     * Width of the JFrame.
     */
    private int myFrameWidth;
    /**
     * Height of the JFrame.
     */
    private int myFrameHeight;
    /**
     * List of three different size of the Game Board that user can choose.
     */
    private List<SetSizeOption> mySizeOption;
    
    /**
     * Constructor that will initialize instance fields.
     */
    public TetrisGUI() {
        
        super("TCSS 305 ---- TETRIS ----");
        myBoard = new Board();
        myBoardDisplay = new TetrisBoard(myBoard);
        myNextPieceDisplay = new TetrisNextPiece();
        myMenuBar = new TetrisMenuBar(this, myBoard);   
        mySizeOption = new ArrayList<SetSizeOption>();
        myFrameWidth = DEFAULT_WIDTH; 
        myFrameHeight = DEFAULT_HEIGHT;
    }
    
    /**
     * Method call from method that will kick-off the program.
     */
    public void start() {
        
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setJMenuBar(myMenuBar);
        setSize(myFrameWidth, myFrameHeight);
        add(myBoardDisplay, BorderLayout.CENTER);
        add(myNextPieceDisplay, BorderLayout.EAST);
        final Toolkit kit = Toolkit.getDefaultToolkit();
        setLocation(
                    (int) ((kit.getScreenSize().getWidth() - this.getWidth()) / 2),
                    (int) ((kit.getScreenSize().getHeight() - this.getHeight()) / 2));
        
        setVisible(true);  
        startGame();
        setUpBoardSizeOption();
    }
    
    private void setUpBoardSizeOption() {
        
        mySizeOption.add(new SetSizeOption("SMALL (200 x 400)", SMALL_WIDTH, SMALL_HEIGHT));
        mySizeOption.add(new SetSizeOption("MEDIUM (300 x 600)", MEDIUM_WIDTH, MEDIUM_HEIGHT));
        mySizeOption.add(new SetSizeOption("LARGE (350 x 700)", LARGE_WIDTH, LARGE_HEIGHT));
        
        for (final AbstractAction a : mySizeOption) {
            myMenuBar.createSizeButton(a);
        }
        
    }
    /**
     * Private method that will start the game immidiately when the GUI open.
     */
    private void startGame() {
        
        myBoard.addObserver(myBoardDisplay);
        myBoard.addObserver(myNextPieceDisplay);
        myBoard.newGame();
    }
    
    private class SetSizeOption extends AbstractAction {
        
        private static final int Y_OFFSET = 50;
        private int myWidth; 
        private int myHeight; 
        
        SetSizeOption(final String theName, final int theWidth, final int theHeight) {
            
            super(theName);
            myWidth = theWidth;
            myHeight = theHeight;
            addPropertyChangeListener(myBoardDisplay);
            addPropertyChangeListener(myNextPieceDisplay);
        }
        
        @Override 
        public void actionPerformed(final ActionEvent theEvent) {
            
            firePropertyChange("Board", myBoardDisplay.getDimension(), 
                               new Dimension(myWidth, myHeight));
            firePropertyChange("PreviewBoard", myNextPieceDisplay.getDimension(), 
                               new Dimension(myWidth, myHeight + Y_OFFSET));
            
            setSize(myWidth*2, myHeight + Y_OFFSET);

        }
    }
}
